// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: code_nodes.sql

package db

import (
	"context"
	"database/sql"
)

const createCodeNode = `-- name: CreateCodeNode :one
INSERT INTO code_nodes (
    session_id,
    path,
    language,
    symbol,
    kind,
    start_line,
    end_line,
    metadata,
    created_at,
    updated_at
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, strftime('%s', 'now'), strftime('%s', 'now')
)
RETURNING id, session_id, path, language, symbol, kind, start_line, end_line, metadata, created_at, updated_at
`

type CreateCodeNodeParams struct {
	SessionID string         `json:"session_id"`
	Path      string         `json:"path"`
	Language  sql.NullString `json:"language"`
	Symbol    sql.NullString `json:"symbol"`
	Kind      sql.NullString `json:"kind"`
	StartLine sql.NullInt64  `json:"start_line"`
	EndLine   sql.NullInt64  `json:"end_line"`
	Metadata  interface{}    `json:"metadata"`
}

func (q *Queries) CreateCodeNode(ctx context.Context, arg CreateCodeNodeParams) (CodeNode, error) {
	row := q.queryRow(ctx, q.createCodeNodeStmt, createCodeNode,
		arg.SessionID,
		arg.Path,
		arg.Language,
		arg.Symbol,
		arg.Kind,
		arg.StartLine,
		arg.EndLine,
		arg.Metadata,
	)
	var i CodeNode
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Path,
		&i.Language,
		&i.Symbol,
		&i.Kind,
		&i.StartLine,
		&i.EndLine,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCodeNode = `-- name: DeleteCodeNode :exec
DELETE FROM code_nodes
WHERE id = ?
`

func (q *Queries) DeleteCodeNode(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteCodeNodeStmt, deleteCodeNode, id)
	return err
}

const getCodeNode = `-- name: GetCodeNode :one
SELECT id, session_id, path, language, symbol, kind, start_line, end_line, metadata, created_at, updated_at
FROM code_nodes
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetCodeNode(ctx context.Context, id int64) (CodeNode, error) {
	row := q.queryRow(ctx, q.getCodeNodeStmt, getCodeNode, id)
	var i CodeNode
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Path,
		&i.Language,
		&i.Symbol,
		&i.Kind,
		&i.StartLine,
		&i.EndLine,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCodeNodesByPath = `-- name: ListCodeNodesByPath :many
SELECT id, session_id, path, language, symbol, kind, start_line, end_line, metadata, created_at, updated_at
FROM code_nodes
WHERE path = ?
ORDER BY start_line
`

func (q *Queries) ListCodeNodesByPath(ctx context.Context, path string) ([]CodeNode, error) {
	rows, err := q.query(ctx, q.listCodeNodesByPathStmt, listCodeNodesByPath, path)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CodeNode{}
	for rows.Next() {
		var i CodeNode
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Path,
			&i.Language,
			&i.Symbol,
			&i.Kind,
			&i.StartLine,
			&i.EndLine,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCodeNodesBySession = `-- name: ListCodeNodesBySession :many
SELECT id, session_id, path, language, symbol, kind, start_line, end_line, metadata, created_at, updated_at
FROM code_nodes
WHERE session_id = ?
ORDER BY path, start_line
`

func (q *Queries) ListCodeNodesBySession(ctx context.Context, sessionID string) ([]CodeNode, error) {
	rows, err := q.query(ctx, q.listCodeNodesBySessionStmt, listCodeNodesBySession, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CodeNode{}
	for rows.Next() {
		var i CodeNode
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Path,
			&i.Language,
			&i.Symbol,
			&i.Kind,
			&i.StartLine,
			&i.EndLine,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCodeNode = `-- name: UpdateCodeNode :one
UPDATE code_nodes
SET language = ?, symbol = ?, kind = ?, start_line = ?, end_line = ?, metadata = ?, updated_at = strftime('%s', 'now')
WHERE id = ?
RETURNING id, session_id, path, language, symbol, kind, start_line, end_line, metadata, created_at, updated_at
`

type UpdateCodeNodeParams struct {
	Language  sql.NullString `json:"language"`
	Symbol    sql.NullString `json:"symbol"`
	Kind      sql.NullString `json:"kind"`
	StartLine sql.NullInt64  `json:"start_line"`
	EndLine   sql.NullInt64  `json:"end_line"`
	Metadata  interface{}    `json:"metadata"`
	ID        int64          `json:"id"`
}

func (q *Queries) UpdateCodeNode(ctx context.Context, arg UpdateCodeNodeParams) (CodeNode, error) {
	row := q.queryRow(ctx, q.updateCodeNodeStmt, updateCodeNode,
		arg.Language,
		arg.Symbol,
		arg.Kind,
		arg.StartLine,
		arg.EndLine,
		arg.Metadata,
		arg.ID,
	)
	var i CodeNode
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Path,
		&i.Language,
		&i.Symbol,
		&i.Kind,
		&i.StartLine,
		&i.EndLine,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
