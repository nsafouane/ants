// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: dependencies.sql

package db

import (
	"context"
	"database/sql"
)

const createDependency = `-- name: CreateDependency :one
INSERT INTO dependencies (
    from_node,
    to_node,
    relation,
    metadata,
    created_at
) VALUES (
    ?, ?, ?, ?, strftime('%s', 'now')
)
RETURNING id, from_node, to_node, relation, metadata, created_at
`

type CreateDependencyParams struct {
	FromNode int64          `json:"from_node"`
	ToNode   int64          `json:"to_node"`
	Relation sql.NullString `json:"relation"`
	Metadata interface{}    `json:"metadata"`
}

func (q *Queries) CreateDependency(ctx context.Context, arg CreateDependencyParams) (Dependency, error) {
	row := q.queryRow(ctx, q.createDependencyStmt, createDependency,
		arg.FromNode,
		arg.ToNode,
		arg.Relation,
		arg.Metadata,
	)
	var i Dependency
	err := row.Scan(
		&i.ID,
		&i.FromNode,
		&i.ToNode,
		&i.Relation,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDependency = `-- name: DeleteDependency :exec
DELETE FROM dependencies
WHERE id = ?
`

func (q *Queries) DeleteDependency(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteDependencyStmt, deleteDependency, id)
	return err
}

const listDependenciesFrom = `-- name: ListDependenciesFrom :many
SELECT id, from_node, to_node, relation, metadata, created_at
FROM dependencies
WHERE from_node = ?
ORDER BY id
`

func (q *Queries) ListDependenciesFrom(ctx context.Context, fromNode int64) ([]Dependency, error) {
	rows, err := q.query(ctx, q.listDependenciesFromStmt, listDependenciesFrom, fromNode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dependency{}
	for rows.Next() {
		var i Dependency
		if err := rows.Scan(
			&i.ID,
			&i.FromNode,
			&i.ToNode,
			&i.Relation,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDependenciesTo = `-- name: ListDependenciesTo :many
SELECT id, from_node, to_node, relation, metadata, created_at
FROM dependencies
WHERE to_node = ?
ORDER BY id
`

func (q *Queries) ListDependenciesTo(ctx context.Context, toNode int64) ([]Dependency, error) {
	rows, err := q.query(ctx, q.listDependenciesToStmt, listDependenciesTo, toNode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dependency{}
	for rows.Next() {
		var i Dependency
		if err := rows.Scan(
			&i.ID,
			&i.FromNode,
			&i.ToNode,
			&i.Relation,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
