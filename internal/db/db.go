// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.acknowledgeAlertStmt, err = db.PrepareContext(ctx, acknowledgeAlert); err != nil {
		return nil, fmt.Errorf("error preparing query AcknowledgeAlert: %w", err)
	}
	if q.cleanOldMetricsStmt, err = db.PrepareContext(ctx, cleanOldMetrics); err != nil {
		return nil, fmt.Errorf("error preparing query CleanOldMetrics: %w", err)
	}
	if q.countActiveAlertsBySeverityStmt, err = db.PrepareContext(ctx, countActiveAlertsBySeverity); err != nil {
		return nil, fmt.Errorf("error preparing query CountActiveAlertsBySeverity: %w", err)
	}
	if q.countAnalysisByStatusStmt, err = db.PrepareContext(ctx, countAnalysisByStatus); err != nil {
		return nil, fmt.Errorf("error preparing query CountAnalysisByStatus: %w", err)
	}
	if q.countAnalysisByTierStmt, err = db.PrepareContext(ctx, countAnalysisByTier); err != nil {
		return nil, fmt.Errorf("error preparing query CountAnalysisByTier: %w", err)
	}
	if q.countCodeNodesByKindStmt, err = db.PrepareContext(ctx, countCodeNodesByKind); err != nil {
		return nil, fmt.Errorf("error preparing query CountCodeNodesByKind: %w", err)
	}
	if q.countCodeNodesBySessionStmt, err = db.PrepareContext(ctx, countCodeNodesBySession); err != nil {
		return nil, fmt.Errorf("error preparing query CountCodeNodesBySession: %w", err)
	}
	if q.countDependenciesFromStmt, err = db.PrepareContext(ctx, countDependenciesFrom); err != nil {
		return nil, fmt.Errorf("error preparing query CountDependenciesFrom: %w", err)
	}
	if q.countDependenciesToStmt, err = db.PrepareContext(ctx, countDependenciesTo); err != nil {
		return nil, fmt.Errorf("error preparing query CountDependenciesTo: %w", err)
	}
	if q.countEmbeddingsBySessionStmt, err = db.PrepareContext(ctx, countEmbeddingsBySession); err != nil {
		return nil, fmt.Errorf("error preparing query CountEmbeddingsBySession: %w", err)
	}
	if q.createAnalysisMetadataStmt, err = db.PrepareContext(ctx, createAnalysisMetadata); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAnalysisMetadata: %w", err)
	}
	if q.createCodeNodeStmt, err = db.PrepareContext(ctx, createCodeNode); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCodeNode: %w", err)
	}
	if q.createDependencyStmt, err = db.PrepareContext(ctx, createDependency); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDependency: %w", err)
	}
	if q.createEmbeddingStmt, err = db.PrepareContext(ctx, createEmbedding); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEmbedding: %w", err)
	}
	if q.createFileStmt, err = db.PrepareContext(ctx, createFile); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFile: %w", err)
	}
	if q.createMessageStmt, err = db.PrepareContext(ctx, createMessage); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMessage: %w", err)
	}
	if q.createSessionStmt, err = db.PrepareContext(ctx, createSession); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSession: %w", err)
	}
	if q.deleteAnalysisByNodeStmt, err = db.PrepareContext(ctx, deleteAnalysisByNode); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAnalysisByNode: %w", err)
	}
	if q.deleteAnalysisBySessionStmt, err = db.PrepareContext(ctx, deleteAnalysisBySession); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAnalysisBySession: %w", err)
	}
	if q.deleteAnalysisMetadataStmt, err = db.PrepareContext(ctx, deleteAnalysisMetadata); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAnalysisMetadata: %w", err)
	}
	if q.deleteCodeNodeStmt, err = db.PrepareContext(ctx, deleteCodeNode); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCodeNode: %w", err)
	}
	if q.deleteCodeNodesByPathStmt, err = db.PrepareContext(ctx, deleteCodeNodesByPath); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCodeNodesByPath: %w", err)
	}
	if q.deleteCodeNodesBySessionStmt, err = db.PrepareContext(ctx, deleteCodeNodesBySession); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCodeNodesBySession: %w", err)
	}
	if q.deleteDependenciesByNodeStmt, err = db.PrepareContext(ctx, deleteDependenciesByNode); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteDependenciesByNode: %w", err)
	}
	if q.deleteDependencyStmt, err = db.PrepareContext(ctx, deleteDependency); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteDependency: %w", err)
	}
	if q.deleteEmbeddingStmt, err = db.PrepareContext(ctx, deleteEmbedding); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEmbedding: %w", err)
	}
	if q.deleteEmbeddingByNodeStmt, err = db.PrepareContext(ctx, deleteEmbeddingByNode); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEmbeddingByNode: %w", err)
	}
	if q.deleteEmbeddingsBySessionStmt, err = db.PrepareContext(ctx, deleteEmbeddingsBySession); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEmbeddingsBySession: %w", err)
	}
	if q.deleteFileStmt, err = db.PrepareContext(ctx, deleteFile); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFile: %w", err)
	}
	if q.deleteMessageStmt, err = db.PrepareContext(ctx, deleteMessage); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMessage: %w", err)
	}
	if q.deleteSessionStmt, err = db.PrepareContext(ctx, deleteSession); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSession: %w", err)
	}
	if q.deleteSessionFilesStmt, err = db.PrepareContext(ctx, deleteSessionFiles); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSessionFiles: %w", err)
	}
	if q.deleteSessionMessagesStmt, err = db.PrepareContext(ctx, deleteSessionMessages); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSessionMessages: %w", err)
	}
	if q.getActiveAlertsStmt, err = db.PrepareContext(ctx, getActiveAlerts); err != nil {
		return nil, fmt.Errorf("error preparing query GetActiveAlerts: %w", err)
	}
	if q.getActiveAlertsByComponentStmt, err = db.PrepareContext(ctx, getActiveAlertsByComponent); err != nil {
		return nil, fmt.Errorf("error preparing query GetActiveAlertsByComponent: %w", err)
	}
	if q.getAlertHistoryStmt, err = db.PrepareContext(ctx, getAlertHistory); err != nil {
		return nil, fmt.Errorf("error preparing query GetAlertHistory: %w", err)
	}
	if q.getAlertsFromViewStmt, err = db.PrepareContext(ctx, getAlertsFromView); err != nil {
		return nil, fmt.Errorf("error preparing query GetAlertsFromView: %w", err)
	}
	if q.getAllMetricMetadataStmt, err = db.PrepareContext(ctx, getAllMetricMetadata); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllMetricMetadata: %w", err)
	}
	if q.getAllPerformanceBenchmarksStmt, err = db.PrepareContext(ctx, getAllPerformanceBenchmarks); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllPerformanceBenchmarks: %w", err)
	}
	if q.getCodeNodeStmt, err = db.PrepareContext(ctx, getCodeNode); err != nil {
		return nil, fmt.Errorf("error preparing query GetCodeNode: %w", err)
	}
	if q.getCodeNodeByPathAndSymbolStmt, err = db.PrepareContext(ctx, getCodeNodeByPathAndSymbol); err != nil {
		return nil, fmt.Errorf("error preparing query GetCodeNodeByPathAndSymbol: %w", err)
	}
	if q.getComponentHealthStmt, err = db.PrepareContext(ctx, getComponentHealth); err != nil {
		return nil, fmt.Errorf("error preparing query GetComponentHealth: %w", err)
	}
	if q.getComponentMetricsSummaryStmt, err = db.PrepareContext(ctx, getComponentMetricsSummary); err != nil {
		return nil, fmt.Errorf("error preparing query GetComponentMetricsSummary: %w", err)
	}
	if q.getDatabaseSizeStmt, err = db.PrepareContext(ctx, getDatabaseSize); err != nil {
		return nil, fmt.Errorf("error preparing query GetDatabaseSize: %w", err)
	}
	if q.getDependencyStmt, err = db.PrepareContext(ctx, getDependency); err != nil {
		return nil, fmt.Errorf("error preparing query GetDependency: %w", err)
	}
	if q.getEmbeddingStmt, err = db.PrepareContext(ctx, getEmbedding); err != nil {
		return nil, fmt.Errorf("error preparing query GetEmbedding: %w", err)
	}
	if q.getEmbeddingByNodeStmt, err = db.PrepareContext(ctx, getEmbeddingByNode); err != nil {
		return nil, fmt.Errorf("error preparing query GetEmbeddingByNode: %w", err)
	}
	if q.getEmbeddingByVectorIDStmt, err = db.PrepareContext(ctx, getEmbeddingByVectorID); err != nil {
		return nil, fmt.Errorf("error preparing query GetEmbeddingByVectorID: %w", err)
	}
	if q.getEmbeddingsByNodeStmt, err = db.PrepareContext(ctx, getEmbeddingsByNode); err != nil {
		return nil, fmt.Errorf("error preparing query GetEmbeddingsByNode: %w", err)
	}
	if q.getFileStmt, err = db.PrepareContext(ctx, getFile); err != nil {
		return nil, fmt.Errorf("error preparing query GetFile: %w", err)
	}
	if q.getFileByPathAndSessionStmt, err = db.PrepareContext(ctx, getFileByPathAndSession); err != nil {
		return nil, fmt.Errorf("error preparing query GetFileByPathAndSession: %w", err)
	}
	if q.getLatestAnalysisByNodeStmt, err = db.PrepareContext(ctx, getLatestAnalysisByNode); err != nil {
		return nil, fmt.Errorf("error preparing query GetLatestAnalysisByNode: %w", err)
	}
	if q.getMessageStmt, err = db.PrepareContext(ctx, getMessage); err != nil {
		return nil, fmt.Errorf("error preparing query GetMessage: %w", err)
	}
	if q.getMetricDataStmt, err = db.PrepareContext(ctx, getMetricData); err != nil {
		return nil, fmt.Errorf("error preparing query GetMetricData: %w", err)
	}
	if q.getMetricDataByComponentStmt, err = db.PrepareContext(ctx, getMetricDataByComponent); err != nil {
		return nil, fmt.Errorf("error preparing query GetMetricDataByComponent: %w", err)
	}
	if q.getMetricMetadataStmt, err = db.PrepareContext(ctx, getMetricMetadata); err != nil {
		return nil, fmt.Errorf("error preparing query GetMetricMetadata: %w", err)
	}
	if q.getMetricStatisticsStmt, err = db.PrepareContext(ctx, getMetricStatistics); err != nil {
		return nil, fmt.Errorf("error preparing query GetMetricStatistics: %w", err)
	}
	if q.getMetricsSummaryStmt, err = db.PrepareContext(ctx, getMetricsSummary); err != nil {
		return nil, fmt.Errorf("error preparing query GetMetricsSummary: %w", err)
	}
	if q.getPerformanceBenchmarkStmt, err = db.PrepareContext(ctx, getPerformanceBenchmark); err != nil {
		return nil, fmt.Errorf("error preparing query GetPerformanceBenchmark: %w", err)
	}
	if q.getRecentMetricsForSessionStmt, err = db.PrepareContext(ctx, getRecentMetricsForSession); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecentMetricsForSession: %w", err)
	}
	if q.getSessionByIDStmt, err = db.PrepareContext(ctx, getSessionByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetSessionByID: %w", err)
	}
	if q.getSystemHealthStmt, err = db.PrepareContext(ctx, getSystemHealth); err != nil {
		return nil, fmt.Errorf("error preparing query GetSystemHealth: %w", err)
	}
	if q.getSystemHealthOverviewStmt, err = db.PrepareContext(ctx, getSystemHealthOverview); err != nil {
		return nil, fmt.Errorf("error preparing query GetSystemHealthOverview: %w", err)
	}
	if q.getTopMetricsByValueStmt, err = db.PrepareContext(ctx, getTopMetricsByValue); err != nil {
		return nil, fmt.Errorf("error preparing query GetTopMetricsByValue: %w", err)
	}
	if q.insertMetricDataStmt, err = db.PrepareContext(ctx, insertMetricData); err != nil {
		return nil, fmt.Errorf("error preparing query InsertMetricData: %w", err)
	}
	if q.insertMetricMetadataStmt, err = db.PrepareContext(ctx, insertMetricMetadata); err != nil {
		return nil, fmt.Errorf("error preparing query InsertMetricMetadata: %w", err)
	}
	if q.insertPerformanceAlertStmt, err = db.PrepareContext(ctx, insertPerformanceAlert); err != nil {
		return nil, fmt.Errorf("error preparing query InsertPerformanceAlert: %w", err)
	}
	if q.insertPerformanceBenchmarkStmt, err = db.PrepareContext(ctx, insertPerformanceBenchmark); err != nil {
		return nil, fmt.Errorf("error preparing query InsertPerformanceBenchmark: %w", err)
	}
	if q.listAllDependenciesStmt, err = db.PrepareContext(ctx, listAllDependencies); err != nil {
		return nil, fmt.Errorf("error preparing query ListAllDependencies: %w", err)
	}
	if q.listAnalysisByNodeStmt, err = db.PrepareContext(ctx, listAnalysisByNode); err != nil {
		return nil, fmt.Errorf("error preparing query ListAnalysisByNode: %w", err)
	}
	if q.listAnalysisBySessionStmt, err = db.PrepareContext(ctx, listAnalysisBySession); err != nil {
		return nil, fmt.Errorf("error preparing query ListAnalysisBySession: %w", err)
	}
	if q.listAnalysisByStatusStmt, err = db.PrepareContext(ctx, listAnalysisByStatus); err != nil {
		return nil, fmt.Errorf("error preparing query ListAnalysisByStatus: %w", err)
	}
	if q.listAnalysisByTierStmt, err = db.PrepareContext(ctx, listAnalysisByTier); err != nil {
		return nil, fmt.Errorf("error preparing query ListAnalysisByTier: %w", err)
	}
	if q.listCodeNodesByKindStmt, err = db.PrepareContext(ctx, listCodeNodesByKind); err != nil {
		return nil, fmt.Errorf("error preparing query ListCodeNodesByKind: %w", err)
	}
	if q.listCodeNodesByLanguageStmt, err = db.PrepareContext(ctx, listCodeNodesByLanguage); err != nil {
		return nil, fmt.Errorf("error preparing query ListCodeNodesByLanguage: %w", err)
	}
	if q.listCodeNodesByPathStmt, err = db.PrepareContext(ctx, listCodeNodesByPath); err != nil {
		return nil, fmt.Errorf("error preparing query ListCodeNodesByPath: %w", err)
	}
	if q.listCodeNodesBySessionStmt, err = db.PrepareContext(ctx, listCodeNodesBySession); err != nil {
		return nil, fmt.Errorf("error preparing query ListCodeNodesBySession: %w", err)
	}
	if q.listCodeNodesInRangeStmt, err = db.PrepareContext(ctx, listCodeNodesInRange); err != nil {
		return nil, fmt.Errorf("error preparing query ListCodeNodesInRange: %w", err)
	}
	if q.listDependenciesByRelationStmt, err = db.PrepareContext(ctx, listDependenciesByRelation); err != nil {
		return nil, fmt.Errorf("error preparing query ListDependenciesByRelation: %w", err)
	}
	if q.listDependenciesFromStmt, err = db.PrepareContext(ctx, listDependenciesFrom); err != nil {
		return nil, fmt.Errorf("error preparing query ListDependenciesFrom: %w", err)
	}
	if q.listDependenciesToStmt, err = db.PrepareContext(ctx, listDependenciesTo); err != nil {
		return nil, fmt.Errorf("error preparing query ListDependenciesTo: %w", err)
	}
	if q.listEmbeddingsByDimsStmt, err = db.PrepareContext(ctx, listEmbeddingsByDims); err != nil {
		return nil, fmt.Errorf("error preparing query ListEmbeddingsByDims: %w", err)
	}
	if q.listEmbeddingsBySessionStmt, err = db.PrepareContext(ctx, listEmbeddingsBySession); err != nil {
		return nil, fmt.Errorf("error preparing query ListEmbeddingsBySession: %w", err)
	}
	if q.listFilesByPathStmt, err = db.PrepareContext(ctx, listFilesByPath); err != nil {
		return nil, fmt.Errorf("error preparing query ListFilesByPath: %w", err)
	}
	if q.listFilesBySessionStmt, err = db.PrepareContext(ctx, listFilesBySession); err != nil {
		return nil, fmt.Errorf("error preparing query ListFilesBySession: %w", err)
	}
	if q.listLatestSessionFilesStmt, err = db.PrepareContext(ctx, listLatestSessionFiles); err != nil {
		return nil, fmt.Errorf("error preparing query ListLatestSessionFiles: %w", err)
	}
	if q.listMessagesBySessionStmt, err = db.PrepareContext(ctx, listMessagesBySession); err != nil {
		return nil, fmt.Errorf("error preparing query ListMessagesBySession: %w", err)
	}
	if q.listNewFilesStmt, err = db.PrepareContext(ctx, listNewFiles); err != nil {
		return nil, fmt.Errorf("error preparing query ListNewFiles: %w", err)
	}
	if q.listPendingAnalysisStmt, err = db.PrepareContext(ctx, listPendingAnalysis); err != nil {
		return nil, fmt.Errorf("error preparing query ListPendingAnalysis: %w", err)
	}
	if q.listSessionsStmt, err = db.PrepareContext(ctx, listSessions); err != nil {
		return nil, fmt.Errorf("error preparing query ListSessions: %w", err)
	}
	if q.resolveAlertStmt, err = db.PrepareContext(ctx, resolveAlert); err != nil {
		return nil, fmt.Errorf("error preparing query ResolveAlert: %w", err)
	}
	if q.searchCodeNodesBySymbolStmt, err = db.PrepareContext(ctx, searchCodeNodesBySymbol); err != nil {
		return nil, fmt.Errorf("error preparing query SearchCodeNodesBySymbol: %w", err)
	}
	if q.updateAnalysisStatusStmt, err = db.PrepareContext(ctx, updateAnalysisStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAnalysisStatus: %w", err)
	}
	if q.updateCodeNodeStmt, err = db.PrepareContext(ctx, updateCodeNode); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCodeNode: %w", err)
	}
	if q.updateEmbeddingStmt, err = db.PrepareContext(ctx, updateEmbedding); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEmbedding: %w", err)
	}
	if q.updateMessageStmt, err = db.PrepareContext(ctx, updateMessage); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMessage: %w", err)
	}
	if q.updateMetricEnabledStmt, err = db.PrepareContext(ctx, updateMetricEnabled); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMetricEnabled: %w", err)
	}
	if q.updateSessionStmt, err = db.PrepareContext(ctx, updateSession); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSession: %w", err)
	}
	if q.updateSystemHealthStatusStmt, err = db.PrepareContext(ctx, updateSystemHealthStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSystemHealthStatus: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.acknowledgeAlertStmt != nil {
		if cerr := q.acknowledgeAlertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing acknowledgeAlertStmt: %w", cerr)
		}
	}
	if q.cleanOldMetricsStmt != nil {
		if cerr := q.cleanOldMetricsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cleanOldMetricsStmt: %w", cerr)
		}
	}
	if q.countActiveAlertsBySeverityStmt != nil {
		if cerr := q.countActiveAlertsBySeverityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countActiveAlertsBySeverityStmt: %w", cerr)
		}
	}
	if q.countAnalysisByStatusStmt != nil {
		if cerr := q.countAnalysisByStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countAnalysisByStatusStmt: %w", cerr)
		}
	}
	if q.countAnalysisByTierStmt != nil {
		if cerr := q.countAnalysisByTierStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countAnalysisByTierStmt: %w", cerr)
		}
	}
	if q.countCodeNodesByKindStmt != nil {
		if cerr := q.countCodeNodesByKindStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countCodeNodesByKindStmt: %w", cerr)
		}
	}
	if q.countCodeNodesBySessionStmt != nil {
		if cerr := q.countCodeNodesBySessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countCodeNodesBySessionStmt: %w", cerr)
		}
	}
	if q.countDependenciesFromStmt != nil {
		if cerr := q.countDependenciesFromStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countDependenciesFromStmt: %w", cerr)
		}
	}
	if q.countDependenciesToStmt != nil {
		if cerr := q.countDependenciesToStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countDependenciesToStmt: %w", cerr)
		}
	}
	if q.countEmbeddingsBySessionStmt != nil {
		if cerr := q.countEmbeddingsBySessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countEmbeddingsBySessionStmt: %w", cerr)
		}
	}
	if q.createAnalysisMetadataStmt != nil {
		if cerr := q.createAnalysisMetadataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAnalysisMetadataStmt: %w", cerr)
		}
	}
	if q.createCodeNodeStmt != nil {
		if cerr := q.createCodeNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCodeNodeStmt: %w", cerr)
		}
	}
	if q.createDependencyStmt != nil {
		if cerr := q.createDependencyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDependencyStmt: %w", cerr)
		}
	}
	if q.createEmbeddingStmt != nil {
		if cerr := q.createEmbeddingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEmbeddingStmt: %w", cerr)
		}
	}
	if q.createFileStmt != nil {
		if cerr := q.createFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFileStmt: %w", cerr)
		}
	}
	if q.createMessageStmt != nil {
		if cerr := q.createMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMessageStmt: %w", cerr)
		}
	}
	if q.createSessionStmt != nil {
		if cerr := q.createSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSessionStmt: %w", cerr)
		}
	}
	if q.deleteAnalysisByNodeStmt != nil {
		if cerr := q.deleteAnalysisByNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAnalysisByNodeStmt: %w", cerr)
		}
	}
	if q.deleteAnalysisBySessionStmt != nil {
		if cerr := q.deleteAnalysisBySessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAnalysisBySessionStmt: %w", cerr)
		}
	}
	if q.deleteAnalysisMetadataStmt != nil {
		if cerr := q.deleteAnalysisMetadataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAnalysisMetadataStmt: %w", cerr)
		}
	}
	if q.deleteCodeNodeStmt != nil {
		if cerr := q.deleteCodeNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCodeNodeStmt: %w", cerr)
		}
	}
	if q.deleteCodeNodesByPathStmt != nil {
		if cerr := q.deleteCodeNodesByPathStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCodeNodesByPathStmt: %w", cerr)
		}
	}
	if q.deleteCodeNodesBySessionStmt != nil {
		if cerr := q.deleteCodeNodesBySessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCodeNodesBySessionStmt: %w", cerr)
		}
	}
	if q.deleteDependenciesByNodeStmt != nil {
		if cerr := q.deleteDependenciesByNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteDependenciesByNodeStmt: %w", cerr)
		}
	}
	if q.deleteDependencyStmt != nil {
		if cerr := q.deleteDependencyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteDependencyStmt: %w", cerr)
		}
	}
	if q.deleteEmbeddingStmt != nil {
		if cerr := q.deleteEmbeddingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEmbeddingStmt: %w", cerr)
		}
	}
	if q.deleteEmbeddingByNodeStmt != nil {
		if cerr := q.deleteEmbeddingByNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEmbeddingByNodeStmt: %w", cerr)
		}
	}
	if q.deleteEmbeddingsBySessionStmt != nil {
		if cerr := q.deleteEmbeddingsBySessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEmbeddingsBySessionStmt: %w", cerr)
		}
	}
	if q.deleteFileStmt != nil {
		if cerr := q.deleteFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFileStmt: %w", cerr)
		}
	}
	if q.deleteMessageStmt != nil {
		if cerr := q.deleteMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMessageStmt: %w", cerr)
		}
	}
	if q.deleteSessionStmt != nil {
		if cerr := q.deleteSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSessionStmt: %w", cerr)
		}
	}
	if q.deleteSessionFilesStmt != nil {
		if cerr := q.deleteSessionFilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSessionFilesStmt: %w", cerr)
		}
	}
	if q.deleteSessionMessagesStmt != nil {
		if cerr := q.deleteSessionMessagesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSessionMessagesStmt: %w", cerr)
		}
	}
	if q.getActiveAlertsStmt != nil {
		if cerr := q.getActiveAlertsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActiveAlertsStmt: %w", cerr)
		}
	}
	if q.getActiveAlertsByComponentStmt != nil {
		if cerr := q.getActiveAlertsByComponentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActiveAlertsByComponentStmt: %w", cerr)
		}
	}
	if q.getAlertHistoryStmt != nil {
		if cerr := q.getAlertHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAlertHistoryStmt: %w", cerr)
		}
	}
	if q.getAlertsFromViewStmt != nil {
		if cerr := q.getAlertsFromViewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAlertsFromViewStmt: %w", cerr)
		}
	}
	if q.getAllMetricMetadataStmt != nil {
		if cerr := q.getAllMetricMetadataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllMetricMetadataStmt: %w", cerr)
		}
	}
	if q.getAllPerformanceBenchmarksStmt != nil {
		if cerr := q.getAllPerformanceBenchmarksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllPerformanceBenchmarksStmt: %w", cerr)
		}
	}
	if q.getCodeNodeStmt != nil {
		if cerr := q.getCodeNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCodeNodeStmt: %w", cerr)
		}
	}
	if q.getCodeNodeByPathAndSymbolStmt != nil {
		if cerr := q.getCodeNodeByPathAndSymbolStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCodeNodeByPathAndSymbolStmt: %w", cerr)
		}
	}
	if q.getComponentHealthStmt != nil {
		if cerr := q.getComponentHealthStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getComponentHealthStmt: %w", cerr)
		}
	}
	if q.getComponentMetricsSummaryStmt != nil {
		if cerr := q.getComponentMetricsSummaryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getComponentMetricsSummaryStmt: %w", cerr)
		}
	}
	if q.getDatabaseSizeStmt != nil {
		if cerr := q.getDatabaseSizeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDatabaseSizeStmt: %w", cerr)
		}
	}
	if q.getDependencyStmt != nil {
		if cerr := q.getDependencyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDependencyStmt: %w", cerr)
		}
	}
	if q.getEmbeddingStmt != nil {
		if cerr := q.getEmbeddingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEmbeddingStmt: %w", cerr)
		}
	}
	if q.getEmbeddingByNodeStmt != nil {
		if cerr := q.getEmbeddingByNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEmbeddingByNodeStmt: %w", cerr)
		}
	}
	if q.getEmbeddingByVectorIDStmt != nil {
		if cerr := q.getEmbeddingByVectorIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEmbeddingByVectorIDStmt: %w", cerr)
		}
	}
	if q.getEmbeddingsByNodeStmt != nil {
		if cerr := q.getEmbeddingsByNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEmbeddingsByNodeStmt: %w", cerr)
		}
	}
	if q.getFileStmt != nil {
		if cerr := q.getFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileStmt: %w", cerr)
		}
	}
	if q.getFileByPathAndSessionStmt != nil {
		if cerr := q.getFileByPathAndSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileByPathAndSessionStmt: %w", cerr)
		}
	}
	if q.getLatestAnalysisByNodeStmt != nil {
		if cerr := q.getLatestAnalysisByNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLatestAnalysisByNodeStmt: %w", cerr)
		}
	}
	if q.getMessageStmt != nil {
		if cerr := q.getMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMessageStmt: %w", cerr)
		}
	}
	if q.getMetricDataStmt != nil {
		if cerr := q.getMetricDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMetricDataStmt: %w", cerr)
		}
	}
	if q.getMetricDataByComponentStmt != nil {
		if cerr := q.getMetricDataByComponentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMetricDataByComponentStmt: %w", cerr)
		}
	}
	if q.getMetricMetadataStmt != nil {
		if cerr := q.getMetricMetadataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMetricMetadataStmt: %w", cerr)
		}
	}
	if q.getMetricStatisticsStmt != nil {
		if cerr := q.getMetricStatisticsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMetricStatisticsStmt: %w", cerr)
		}
	}
	if q.getMetricsSummaryStmt != nil {
		if cerr := q.getMetricsSummaryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMetricsSummaryStmt: %w", cerr)
		}
	}
	if q.getPerformanceBenchmarkStmt != nil {
		if cerr := q.getPerformanceBenchmarkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPerformanceBenchmarkStmt: %w", cerr)
		}
	}
	if q.getRecentMetricsForSessionStmt != nil {
		if cerr := q.getRecentMetricsForSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecentMetricsForSessionStmt: %w", cerr)
		}
	}
	if q.getSessionByIDStmt != nil {
		if cerr := q.getSessionByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSessionByIDStmt: %w", cerr)
		}
	}
	if q.getSystemHealthStmt != nil {
		if cerr := q.getSystemHealthStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSystemHealthStmt: %w", cerr)
		}
	}
	if q.getSystemHealthOverviewStmt != nil {
		if cerr := q.getSystemHealthOverviewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSystemHealthOverviewStmt: %w", cerr)
		}
	}
	if q.getTopMetricsByValueStmt != nil {
		if cerr := q.getTopMetricsByValueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTopMetricsByValueStmt: %w", cerr)
		}
	}
	if q.insertMetricDataStmt != nil {
		if cerr := q.insertMetricDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertMetricDataStmt: %w", cerr)
		}
	}
	if q.insertMetricMetadataStmt != nil {
		if cerr := q.insertMetricMetadataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertMetricMetadataStmt: %w", cerr)
		}
	}
	if q.insertPerformanceAlertStmt != nil {
		if cerr := q.insertPerformanceAlertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertPerformanceAlertStmt: %w", cerr)
		}
	}
	if q.insertPerformanceBenchmarkStmt != nil {
		if cerr := q.insertPerformanceBenchmarkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertPerformanceBenchmarkStmt: %w", cerr)
		}
	}
	if q.listAllDependenciesStmt != nil {
		if cerr := q.listAllDependenciesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAllDependenciesStmt: %w", cerr)
		}
	}
	if q.listAnalysisByNodeStmt != nil {
		if cerr := q.listAnalysisByNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAnalysisByNodeStmt: %w", cerr)
		}
	}
	if q.listAnalysisBySessionStmt != nil {
		if cerr := q.listAnalysisBySessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAnalysisBySessionStmt: %w", cerr)
		}
	}
	if q.listAnalysisByStatusStmt != nil {
		if cerr := q.listAnalysisByStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAnalysisByStatusStmt: %w", cerr)
		}
	}
	if q.listAnalysisByTierStmt != nil {
		if cerr := q.listAnalysisByTierStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAnalysisByTierStmt: %w", cerr)
		}
	}
	if q.listCodeNodesByKindStmt != nil {
		if cerr := q.listCodeNodesByKindStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCodeNodesByKindStmt: %w", cerr)
		}
	}
	if q.listCodeNodesByLanguageStmt != nil {
		if cerr := q.listCodeNodesByLanguageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCodeNodesByLanguageStmt: %w", cerr)
		}
	}
	if q.listCodeNodesByPathStmt != nil {
		if cerr := q.listCodeNodesByPathStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCodeNodesByPathStmt: %w", cerr)
		}
	}
	if q.listCodeNodesBySessionStmt != nil {
		if cerr := q.listCodeNodesBySessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCodeNodesBySessionStmt: %w", cerr)
		}
	}
	if q.listCodeNodesInRangeStmt != nil {
		if cerr := q.listCodeNodesInRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCodeNodesInRangeStmt: %w", cerr)
		}
	}
	if q.listDependenciesByRelationStmt != nil {
		if cerr := q.listDependenciesByRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listDependenciesByRelationStmt: %w", cerr)
		}
	}
	if q.listDependenciesFromStmt != nil {
		if cerr := q.listDependenciesFromStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listDependenciesFromStmt: %w", cerr)
		}
	}
	if q.listDependenciesToStmt != nil {
		if cerr := q.listDependenciesToStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listDependenciesToStmt: %w", cerr)
		}
	}
	if q.listEmbeddingsByDimsStmt != nil {
		if cerr := q.listEmbeddingsByDimsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEmbeddingsByDimsStmt: %w", cerr)
		}
	}
	if q.listEmbeddingsBySessionStmt != nil {
		if cerr := q.listEmbeddingsBySessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEmbeddingsBySessionStmt: %w", cerr)
		}
	}
	if q.listFilesByPathStmt != nil {
		if cerr := q.listFilesByPathStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFilesByPathStmt: %w", cerr)
		}
	}
	if q.listFilesBySessionStmt != nil {
		if cerr := q.listFilesBySessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFilesBySessionStmt: %w", cerr)
		}
	}
	if q.listLatestSessionFilesStmt != nil {
		if cerr := q.listLatestSessionFilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listLatestSessionFilesStmt: %w", cerr)
		}
	}
	if q.listMessagesBySessionStmt != nil {
		if cerr := q.listMessagesBySessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMessagesBySessionStmt: %w", cerr)
		}
	}
	if q.listNewFilesStmt != nil {
		if cerr := q.listNewFilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listNewFilesStmt: %w", cerr)
		}
	}
	if q.listPendingAnalysisStmt != nil {
		if cerr := q.listPendingAnalysisStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPendingAnalysisStmt: %w", cerr)
		}
	}
	if q.listSessionsStmt != nil {
		if cerr := q.listSessionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSessionsStmt: %w", cerr)
		}
	}
	if q.resolveAlertStmt != nil {
		if cerr := q.resolveAlertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing resolveAlertStmt: %w", cerr)
		}
	}
	if q.searchCodeNodesBySymbolStmt != nil {
		if cerr := q.searchCodeNodesBySymbolStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchCodeNodesBySymbolStmt: %w", cerr)
		}
	}
	if q.updateAnalysisStatusStmt != nil {
		if cerr := q.updateAnalysisStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAnalysisStatusStmt: %w", cerr)
		}
	}
	if q.updateCodeNodeStmt != nil {
		if cerr := q.updateCodeNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCodeNodeStmt: %w", cerr)
		}
	}
	if q.updateEmbeddingStmt != nil {
		if cerr := q.updateEmbeddingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEmbeddingStmt: %w", cerr)
		}
	}
	if q.updateMessageStmt != nil {
		if cerr := q.updateMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMessageStmt: %w", cerr)
		}
	}
	if q.updateMetricEnabledStmt != nil {
		if cerr := q.updateMetricEnabledStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMetricEnabledStmt: %w", cerr)
		}
	}
	if q.updateSessionStmt != nil {
		if cerr := q.updateSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSessionStmt: %w", cerr)
		}
	}
	if q.updateSystemHealthStatusStmt != nil {
		if cerr := q.updateSystemHealthStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSystemHealthStatusStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                              DBTX
	tx                              *sql.Tx
	acknowledgeAlertStmt            *sql.Stmt
	cleanOldMetricsStmt             *sql.Stmt
	countActiveAlertsBySeverityStmt *sql.Stmt
	countAnalysisByStatusStmt       *sql.Stmt
	countAnalysisByTierStmt         *sql.Stmt
	countCodeNodesByKindStmt        *sql.Stmt
	countCodeNodesBySessionStmt     *sql.Stmt
	countDependenciesFromStmt       *sql.Stmt
	countDependenciesToStmt         *sql.Stmt
	countEmbeddingsBySessionStmt    *sql.Stmt
	createAnalysisMetadataStmt      *sql.Stmt
	createCodeNodeStmt              *sql.Stmt
	createDependencyStmt            *sql.Stmt
	createEmbeddingStmt             *sql.Stmt
	createFileStmt                  *sql.Stmt
	createMessageStmt               *sql.Stmt
	createSessionStmt               *sql.Stmt
	deleteAnalysisByNodeStmt        *sql.Stmt
	deleteAnalysisBySessionStmt     *sql.Stmt
	deleteAnalysisMetadataStmt      *sql.Stmt
	deleteCodeNodeStmt              *sql.Stmt
	deleteCodeNodesByPathStmt       *sql.Stmt
	deleteCodeNodesBySessionStmt    *sql.Stmt
	deleteDependenciesByNodeStmt    *sql.Stmt
	deleteDependencyStmt            *sql.Stmt
	deleteEmbeddingStmt             *sql.Stmt
	deleteEmbeddingByNodeStmt       *sql.Stmt
	deleteEmbeddingsBySessionStmt   *sql.Stmt
	deleteFileStmt                  *sql.Stmt
	deleteMessageStmt               *sql.Stmt
	deleteSessionStmt               *sql.Stmt
	deleteSessionFilesStmt          *sql.Stmt
	deleteSessionMessagesStmt       *sql.Stmt
	getActiveAlertsStmt             *sql.Stmt
	getActiveAlertsByComponentStmt  *sql.Stmt
	getAlertHistoryStmt             *sql.Stmt
	getAlertsFromViewStmt           *sql.Stmt
	getAllMetricMetadataStmt        *sql.Stmt
	getAllPerformanceBenchmarksStmt *sql.Stmt
	getCodeNodeStmt                 *sql.Stmt
	getCodeNodeByPathAndSymbolStmt  *sql.Stmt
	getComponentHealthStmt          *sql.Stmt
	getComponentMetricsSummaryStmt  *sql.Stmt
	getDatabaseSizeStmt             *sql.Stmt
	getDependencyStmt               *sql.Stmt
	getEmbeddingStmt                *sql.Stmt
	getEmbeddingByNodeStmt          *sql.Stmt
	getEmbeddingByVectorIDStmt      *sql.Stmt
	getEmbeddingsByNodeStmt         *sql.Stmt
	getFileStmt                     *sql.Stmt
	getFileByPathAndSessionStmt     *sql.Stmt
	getLatestAnalysisByNodeStmt     *sql.Stmt
	getMessageStmt                  *sql.Stmt
	getMetricDataStmt               *sql.Stmt
	getMetricDataByComponentStmt    *sql.Stmt
	getMetricMetadataStmt           *sql.Stmt
	getMetricStatisticsStmt         *sql.Stmt
	getMetricsSummaryStmt           *sql.Stmt
	getPerformanceBenchmarkStmt     *sql.Stmt
	getRecentMetricsForSessionStmt  *sql.Stmt
	getSessionByIDStmt              *sql.Stmt
	getSystemHealthStmt             *sql.Stmt
	getSystemHealthOverviewStmt     *sql.Stmt
	getTopMetricsByValueStmt        *sql.Stmt
	insertMetricDataStmt            *sql.Stmt
	insertMetricMetadataStmt        *sql.Stmt
	insertPerformanceAlertStmt      *sql.Stmt
	insertPerformanceBenchmarkStmt  *sql.Stmt
	listAllDependenciesStmt         *sql.Stmt
	listAnalysisByNodeStmt          *sql.Stmt
	listAnalysisBySessionStmt       *sql.Stmt
	listAnalysisByStatusStmt        *sql.Stmt
	listAnalysisByTierStmt          *sql.Stmt
	listCodeNodesByKindStmt         *sql.Stmt
	listCodeNodesByLanguageStmt     *sql.Stmt
	listCodeNodesByPathStmt         *sql.Stmt
	listCodeNodesBySessionStmt      *sql.Stmt
	listCodeNodesInRangeStmt        *sql.Stmt
	listDependenciesByRelationStmt  *sql.Stmt
	listDependenciesFromStmt        *sql.Stmt
	listDependenciesToStmt          *sql.Stmt
	listEmbeddingsByDimsStmt        *sql.Stmt
	listEmbeddingsBySessionStmt     *sql.Stmt
	listFilesByPathStmt             *sql.Stmt
	listFilesBySessionStmt          *sql.Stmt
	listLatestSessionFilesStmt      *sql.Stmt
	listMessagesBySessionStmt       *sql.Stmt
	listNewFilesStmt                *sql.Stmt
	listPendingAnalysisStmt         *sql.Stmt
	listSessionsStmt                *sql.Stmt
	resolveAlertStmt                *sql.Stmt
	searchCodeNodesBySymbolStmt     *sql.Stmt
	updateAnalysisStatusStmt        *sql.Stmt
	updateCodeNodeStmt              *sql.Stmt
	updateEmbeddingStmt             *sql.Stmt
	updateMessageStmt               *sql.Stmt
	updateMetricEnabledStmt         *sql.Stmt
	updateSessionStmt               *sql.Stmt
	updateSystemHealthStatusStmt    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                              tx,
		tx:                              tx,
		acknowledgeAlertStmt:            q.acknowledgeAlertStmt,
		cleanOldMetricsStmt:             q.cleanOldMetricsStmt,
		countActiveAlertsBySeverityStmt: q.countActiveAlertsBySeverityStmt,
		countAnalysisByStatusStmt:       q.countAnalysisByStatusStmt,
		countAnalysisByTierStmt:         q.countAnalysisByTierStmt,
		countCodeNodesByKindStmt:        q.countCodeNodesByKindStmt,
		countCodeNodesBySessionStmt:     q.countCodeNodesBySessionStmt,
		countDependenciesFromStmt:       q.countDependenciesFromStmt,
		countDependenciesToStmt:         q.countDependenciesToStmt,
		countEmbeddingsBySessionStmt:    q.countEmbeddingsBySessionStmt,
		createAnalysisMetadataStmt:      q.createAnalysisMetadataStmt,
		createCodeNodeStmt:              q.createCodeNodeStmt,
		createDependencyStmt:            q.createDependencyStmt,
		createEmbeddingStmt:             q.createEmbeddingStmt,
		createFileStmt:                  q.createFileStmt,
		createMessageStmt:               q.createMessageStmt,
		createSessionStmt:               q.createSessionStmt,
		deleteAnalysisByNodeStmt:        q.deleteAnalysisByNodeStmt,
		deleteAnalysisBySessionStmt:     q.deleteAnalysisBySessionStmt,
		deleteAnalysisMetadataStmt:      q.deleteAnalysisMetadataStmt,
		deleteCodeNodeStmt:              q.deleteCodeNodeStmt,
		deleteCodeNodesByPathStmt:       q.deleteCodeNodesByPathStmt,
		deleteCodeNodesBySessionStmt:    q.deleteCodeNodesBySessionStmt,
		deleteDependenciesByNodeStmt:    q.deleteDependenciesByNodeStmt,
		deleteDependencyStmt:            q.deleteDependencyStmt,
		deleteEmbeddingStmt:             q.deleteEmbeddingStmt,
		deleteEmbeddingByNodeStmt:       q.deleteEmbeddingByNodeStmt,
		deleteEmbeddingsBySessionStmt:   q.deleteEmbeddingsBySessionStmt,
		deleteFileStmt:                  q.deleteFileStmt,
		deleteMessageStmt:               q.deleteMessageStmt,
		deleteSessionStmt:               q.deleteSessionStmt,
		deleteSessionFilesStmt:          q.deleteSessionFilesStmt,
		deleteSessionMessagesStmt:       q.deleteSessionMessagesStmt,
		getActiveAlertsStmt:             q.getActiveAlertsStmt,
		getActiveAlertsByComponentStmt:  q.getActiveAlertsByComponentStmt,
		getAlertHistoryStmt:             q.getAlertHistoryStmt,
		getAlertsFromViewStmt:           q.getAlertsFromViewStmt,
		getAllMetricMetadataStmt:        q.getAllMetricMetadataStmt,
		getAllPerformanceBenchmarksStmt: q.getAllPerformanceBenchmarksStmt,
		getCodeNodeStmt:                 q.getCodeNodeStmt,
		getCodeNodeByPathAndSymbolStmt:  q.getCodeNodeByPathAndSymbolStmt,
		getComponentHealthStmt:          q.getComponentHealthStmt,
		getComponentMetricsSummaryStmt:  q.getComponentMetricsSummaryStmt,
		getDatabaseSizeStmt:             q.getDatabaseSizeStmt,
		getDependencyStmt:               q.getDependencyStmt,
		getEmbeddingStmt:                q.getEmbeddingStmt,
		getEmbeddingByNodeStmt:          q.getEmbeddingByNodeStmt,
		getEmbeddingByVectorIDStmt:      q.getEmbeddingByVectorIDStmt,
		getEmbeddingsByNodeStmt:         q.getEmbeddingsByNodeStmt,
		getFileStmt:                     q.getFileStmt,
		getFileByPathAndSessionStmt:     q.getFileByPathAndSessionStmt,
		getLatestAnalysisByNodeStmt:     q.getLatestAnalysisByNodeStmt,
		getMessageStmt:                  q.getMessageStmt,
		getMetricDataStmt:               q.getMetricDataStmt,
		getMetricDataByComponentStmt:    q.getMetricDataByComponentStmt,
		getMetricMetadataStmt:           q.getMetricMetadataStmt,
		getMetricStatisticsStmt:         q.getMetricStatisticsStmt,
		getMetricsSummaryStmt:           q.getMetricsSummaryStmt,
		getPerformanceBenchmarkStmt:     q.getPerformanceBenchmarkStmt,
		getRecentMetricsForSessionStmt:  q.getRecentMetricsForSessionStmt,
		getSessionByIDStmt:              q.getSessionByIDStmt,
		getSystemHealthStmt:             q.getSystemHealthStmt,
		getSystemHealthOverviewStmt:     q.getSystemHealthOverviewStmt,
		getTopMetricsByValueStmt:        q.getTopMetricsByValueStmt,
		insertMetricDataStmt:            q.insertMetricDataStmt,
		insertMetricMetadataStmt:        q.insertMetricMetadataStmt,
		insertPerformanceAlertStmt:      q.insertPerformanceAlertStmt,
		insertPerformanceBenchmarkStmt:  q.insertPerformanceBenchmarkStmt,
		listAllDependenciesStmt:         q.listAllDependenciesStmt,
		listAnalysisByNodeStmt:          q.listAnalysisByNodeStmt,
		listAnalysisBySessionStmt:       q.listAnalysisBySessionStmt,
		listAnalysisByStatusStmt:        q.listAnalysisByStatusStmt,
		listAnalysisByTierStmt:          q.listAnalysisByTierStmt,
		listCodeNodesByKindStmt:         q.listCodeNodesByKindStmt,
		listCodeNodesByLanguageStmt:     q.listCodeNodesByLanguageStmt,
		listCodeNodesByPathStmt:         q.listCodeNodesByPathStmt,
		listCodeNodesBySessionStmt:      q.listCodeNodesBySessionStmt,
		listCodeNodesInRangeStmt:        q.listCodeNodesInRangeStmt,
		listDependenciesByRelationStmt:  q.listDependenciesByRelationStmt,
		listDependenciesFromStmt:        q.listDependenciesFromStmt,
		listDependenciesToStmt:          q.listDependenciesToStmt,
		listEmbeddingsByDimsStmt:        q.listEmbeddingsByDimsStmt,
		listEmbeddingsBySessionStmt:     q.listEmbeddingsBySessionStmt,
		listFilesByPathStmt:             q.listFilesByPathStmt,
		listFilesBySessionStmt:          q.listFilesBySessionStmt,
		listLatestSessionFilesStmt:      q.listLatestSessionFilesStmt,
		listMessagesBySessionStmt:       q.listMessagesBySessionStmt,
		listNewFilesStmt:                q.listNewFilesStmt,
		listPendingAnalysisStmt:         q.listPendingAnalysisStmt,
		listSessionsStmt:                q.listSessionsStmt,
		resolveAlertStmt:                q.resolveAlertStmt,
		searchCodeNodesBySymbolStmt:     q.searchCodeNodesBySymbolStmt,
		updateAnalysisStatusStmt:        q.updateAnalysisStatusStmt,
		updateCodeNodeStmt:              q.updateCodeNodeStmt,
		updateEmbeddingStmt:             q.updateEmbeddingStmt,
		updateMessageStmt:               q.updateMessageStmt,
		updateMetricEnabledStmt:         q.updateMetricEnabledStmt,
		updateSessionStmt:               q.updateSessionStmt,
		updateSystemHealthStatusStmt:    q.updateSystemHealthStatusStmt,
	}
}
